#!/usr/bin/python3

import gi
import os
import sys
import time
import subprocess
import atexit
from os import path
from threading import Thread
from signal import signal, SIGINT
from sys import exit

gi.require_version('Gtk', '3.0')
gi.require_version('AppIndicator3', '0.1')
gi.require_version('Notify', '0.7')

from gi.repository import Gtk as gtk
from gi.repository import AppIndicator3 as appindicator
from gi.repository import GLib
from gi.repository import Notify as notify

APPINDICATOR_ID = 'wireguard_indicator'

class Indicator():
    def __init__(self):
        self.indicator = appindicator.Indicator.new(APPINDICATOR_ID, "network-offline", appindicator.IndicatorCategory.SYSTEM_SERVICES)
        self.indicator.set_status(appindicator.IndicatorStatus.ACTIVE)
        self.indicator.set_menu(self.build_menu())

        # Check status of Wireguard to change icon state
        # Daemonize the thread to make the indicator stopable
        self.update = Thread(target=self.monitor_vpn)
        self.update.setDaemon(True)
        self.update.start()

        notify.init(APPINDICATOR_ID)

    def build_menu(self):
        menu = gtk.Menu()

        start_vpn = gtk.MenuItem(label='Start VPN')
        start_vpn.connect('activate', self.up_vpn)

        stop_vpn = gtk.MenuItem(label='Stop VPN')
        stop_vpn.connect('activate', self.down_vpn)

        item_quit = gtk.MenuItem(label='Quit')
        item_quit.connect('activate', self.quit)

        menu.append(start_vpn)
        menu.append(stop_vpn)
        menu.append(item_quit)
        menu.show_all()
        return menu

    def up_vpn(self, source):
        os.system("nohup sudo wg-quick up wg0 >/dev/null 2>&1")

    def down_vpn(self, source):
        os.system("nohup sudo wg-quick down wg0 >/dev/null 2>&1")

    def monitor_vpn(self):
        while True:
            time.sleep(1)

            if len(subprocess.check_output(['sudo', 'wg'])) == 0:
                GLib.idle_add(
                        self.indicator.set_icon,
                        "network-offline",
                        priority=GLib.PRIORITY_DEFAULT
                )
            else:
                GLib.idle_add(
                        self.indicator.set_icon,
                        "network-vpn",
                        priority=GLib.PRIORITY_DEFAULT
                )
            
    def quit(self, source):
        gtk.main_quit()

# Basic service management: Only allows once instance of this to run at a time
def service():
	if len(sys.argv) < 2:
		print('ERROR: Missing argument. Specify \'up\' or \'down\'')
		sys.exit()

	if sys.argv[1] == 'up':
		if path.exists('app.run'):
			print('ERROR: Service already running. (Remove app.run if this is a mistake)')

			sys.exit()
		else:
			pid_file = open('app.run', 'w')
			pid_file.write( str(os.getpid()) )
			pid_file.close()

	elif sys.argv[1] == 'down':
		pid_file = open('app.run', 'r')
		pid = pid_file.readline()
		os.system( "kill {0}".format(pid) )
		pid_file.close()

		os.system("rm app.run")

		sys.exit()
	
	else:
		print('ERROR: Invalid argument. Specify \'up\' or \'down\'')

		sys.exit()

# signal_received, frame
def exit_handler():
	print('Exit signal detected. Exiting gracefully')
	os.system("rm app.run")
	sys.exit()

if __name__ == '__main__':
	signal(SIGINT, exit_handler)
	atexit.register(exit_handler)
	
	service()
	
	Indicator()
	gtk.main()
